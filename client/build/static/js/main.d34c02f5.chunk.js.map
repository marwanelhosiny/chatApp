{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","formData","FormData","append","p","accept","pics","files","undefined","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","Array","isArray","console","warn","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","token","get","log","handleRename","patch","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroup","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d34c02f5.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState([]);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"http://localhost:5000/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    try {\n      const formData = new FormData();\n      if(pic){\n      formData.append(\"name\", name);\n      formData.append(\"email\", email);\n      formData.append(\"password\", password);\n      formData.append(\"profilePic\", pic);  // Assuming \"pic\" is the file input field\n      }else if(!pic){\n        formData.append(\"name\", name);\n        formData.append(\"email\", email);\n        formData.append(\"password\", password);\n      }\n      \n\n      const config = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",  // Set the content type to multipart/form-data\n        },\n      };\n\n      const { data } = await axios.post(\"http://localhost:5000/user\", formData, config);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true); // Start loading when a file is being processed\n    if (pics === undefined) {\n      toast({\n        title: \"Please upload your profile picture\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } else if (pics.type === \"image/jpeg\" || pics.type === \"image/png\" || pics.type === \"image/jpg\") {\n      setPic(pics); // If file is correct, set the pic\n    } else {\n      toast({\n        title: \"Profile picture must be in JPEG, PNG, or JPG format\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n    setPicLoading(false); // Stop loading after processing the file\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          TokTok\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `http://localhost:5000/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"joinChat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            \"accesstoken\": `xDfeDp${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"http://localhost:5000/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"newMessage\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"messageRecieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroup ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  if (!Array.isArray(users) || users.length === 0) {\n    console.warn(\"getSender called with invalid users array\", users);\n    return \"\";\n  }\n  return users[0]?._id === loggedUser?._id ? users[1]?.name : users[0]?.name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  if (!Array.isArray(users) || users.length < 2) {\n    console.warn(\"getSenderFull called with invalid users array\", users);\n    return null; \n  }\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`http://localhost:5000/user?name=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n      const { data } = await axios.patch(\n        `http://localhost:5000/chat/group`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n      const { data } = await axios.patch(\n        `http://localhost:5000/chat/groupAdd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n      const { data } = await axios.patch(\n        `http://localhost:5000/chat/groupKick`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`http://localhost:5000/user?name=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `http://localhost:5000/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"http://localhost:5000/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats && chats.length>0? (\n          <Stack overflowY=\"scroll\">\n\n\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroup\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`http://localhost:5000/user/?name=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"accesstoken\": `xDfeDp${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`http://localhost:5000/chat`, { userId }, config);\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          TokTok\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroup\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                \n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}